# Amy Huo
# Implements the midrange.

# Midrange takes in 
# a beat pattern
# option for arpeggio (ascending/descending)/not/both/alternating
# staccato?
# various density stuff
# and volume for each note (accents)

#TODO: FIGURE OUT GLOBAL VARIABLES, STYLES
#TODO: FIX MY TRASH ARRAY MANIPULATION

# GLOBAL VARIABLES

//i.e. C E G, E G C, G C E
inversions = [[0, 1, 2], [1, 2, 0], [2, 0, 1]]
inv_oct_weights = [[0, 0, 0], [0, 0, 1], [0, 1, 1]]
curr_style = styles[0];

//these have overlap with the melody/percussion- merge plz
//also requires that the time sig is correct...
jazz = [0.5, 1.0, 0.5, 0.2, 0.8, 1.0]
tango = [1.5, 1.5, 1.0]
waltz = [1.0, 1.0, 1.0]
rumba = [1.5, 0.5, 1.0, 1.0]
tap = [0.5, 0.5, 0.5, 0.5]]

styles = [jazz, tango, waltz, rumba, tap]

fun get_c_note(int number):
    count = 0
    i = 0
    while (count < number):
        if chord[i] == 1:
            count++;
    display number, i
    return i

fun create_p_track (int den, bool stac, int key, int oct, vol) =
    //optional empty chord
    if den == 0:
        return Track([], 0, "chordal") 
    //once per measure, grabs an inversion type and plays the three notes in that inversion
    if den == 1:
        rand = (int)(random() * 3)
        inver = inversions[rand]
        return Track([[Note(oct * 12 + get_c_note(inver[0]) + inv_oct_weights[rand][0], key, vol, current_beats_per_measure), 
                       Note(oct * 12 + get_c_note(inver[1]) + inv_oct_weights[rand][1], key, vol, current_beats_per_measure),
                       Note(oct * 12 + get_c_note(inver[2]) + inv_oct_weights[rand][2], key, vol, current_beats_per_measure)]], 
                       0, "chordal") 
    //follow simple beat pattern, no arpeggio
    if den == 2:
        res_array = [[]]
        for k from 0 to len:
            n_array.append([Note(oct * 12 + get_c_note(inver[0]) + inv_oct_weights[rand][0], key, vol, curr_style[k]), 
                              Note(oct * 12 + get_c_note(inver[1]) + inv_oct_weights[rand][1], key, vol, curr_style[k]),
                              Note(oct * 12 + get_c_note(inver[2]) + inv_oct_weights[rand][2], key, vol, curr_style[k])])
        r_array.subseq(1, length(n_array))
        p = Track(r_array, 0, "chordal") 
        return p
        
