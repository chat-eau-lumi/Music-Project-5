# Required files to work on
require "debug"
require "midi-io"
require "prefs"

# Global variables
MIN_PITCH = 0;
MAX_PITCH = 12;

# NOTES
# There are three representation of note pitches to consider: 
# * "keys" for piano OSC input ((single-character string, int octave))
# * "pitches" for MIDI pitch values (int)
# * "notes" octave/interval/key/staccato for music generation (note)

// key is an offset, with c = 0, which may cause some problems but 
// hopefully shouldn't
class note:

    var key
    var staccato
    var sduration
    var pitchC
    
    //a note's inherent volume
    var volume
    //changes to the volume; i.e. slider control, etc.
    var volFactor
    
    //note is created using pitch and key. staccato is default off
    def init(pit, k, vol, dur):
        key = k
        staccato = false
        volume = vol
        sduration = dur
        pitchC = pit 
        volFactor=1 

    def note_to_pitch():
        return pitchC
    
    def staccato_on():
        staccato = true
        
    def staccato_off():
        staccato = false

    def getDuration()
        return sduration

    def getVolume()
        if volume*volFactor>127:
            return 127 
        else
            return int(volume*volFactor)

    def getTrueVolume()
        return volume
    
    def setVolume(newVol)
        volFactor=newVol

//creates a note identical to orig but with a new pitch
    def new_pitch_note(pitch):
        new_p = note(pitch, key, volume, sduration)
        if (staccato):
            new_p.staccato_on()
        new_p.setVolume(volFactor)
        return new_p
    
    

def keys_to_note(oscString):

    //not yet implemented
    return 0;

# TRACK
# An array of (note, duration, volume) where durations add to either a 
# half-measure or
# a multiple of whole measures. Also includes variables for variability, 
# pitch range, and more stuff TBD.

class track:

    var array
    var variability
    var type
    var instrument 
    var trackVolFactor
    var newRatio
    var cursor

    // takes in an array of notes, if have no motif, can key in empty
    // array which means we need to generate new motif
    def init(notes, vari, typ):
        cursor=0
        array = notes //actually inputting array functionality TBD
        variability = vari
        type = typ
        trackVolFactor=1
        newRatio=1

        if (type == "melody" or type == "harmony"): 
            instrument = 0x60 #piano
        else:
            instrument = 0x35 #drum

    def changeVol( newR):
        newRatio=newR
        curLen = len(array)
        for x=0 to (curLen):
            curNote = array[x][0]
            curNote.setVolume(newRatio*trackVolFactor)

    def changeInstrument( newInst):
        instrument = newInst

    def changeDensity( newDen):
        density = newDen
    
    def changeOctave(curOct):
        curLen = len(array)
        for x=0 to curLen:
           curNote = array[x]
           curNote.octave = curOct

    def getTrack():
        return type

    def getInstrument():
        return instrument

    def getArray():
        return array
    
    def changeVolFactor(newVol)
        trackVolFactor=newVol
        curLen = len(array)
        for x=0 to (curLen):
            curNote = array[x][0]
            curNote.setVolume(newRatio*trackVolFactor)
