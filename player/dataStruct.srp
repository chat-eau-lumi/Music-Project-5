# Required files to work on
require "debug"
require "midi-io"
require "prefs"

# NOTES

// key is an offset, with c = 0, of what key was playing when the
// note was created.
class note:
    var key
    var staccato
    var sduration
    var pitchC
    var noteEnd
    
    //a note's inherent volume
    var volume
    //changes to the volume; i.e. slider control, etc.
    var volFactor
    
    //note is created using pitch and key. staccato is default off
    def init(pit, k, vol, dur):
        key = k
        staccato = false
        volume = vol
        sduration = dur
        pitchC = pit - k
        volFactor=1 
        noteEnd=dur-.05

    def note_to_pitch():
        return pitchC + key
    
    def staccato_on():
        staccato = true
        
    def staccato_off():
        staccato = false

    def getDuration():
        return sduration

    def getVolume():
        if volume*volFactor>127:
            return 127 
        else
            return int(volume*volFactor)

    def getTrueVolume():
        return volume

    def getNoteEnd():
        return noteEnd
    
    def setVolume(newVol):
        volFactor=newVol
    
    def setKey(k):
        key=k

    def setNoteEnd(v):
        noteEnd=v
//creates a note identical to orig but with a new pitch
    def new_pitch_note(pitch):
        new_p = note(pitch, key, volume, sduration)
        if (staccato):
            new_p.staccato_on()
        new_p.setVolume(volFactor)
        return new_p
    
    

def keys_to_note(oscString):

    //not yet implemented
    return 0;

# TRACK
# An array of (note, duration, volume) where durations add to either a 
# half-measure or
# a multiple of whole measures. Also includes variables for variability, 
# pitch range, and more stuff TBD.

class track:

    var array
    var variability
    var type
    var instrument 
    var trackVolFactor
    var newRatio
    var cursor
    var active
    var realBPM
    var extra
    var measures
    var resetVal


    // takes in an array of notes, if have no motif, can key in empty
    // array which means we need to generate new motif
    def init(notes, vari, typ):
        resetVal = -1
        realBPM=4
        cursor=0
        active = 1
        array = notes //actually inputting array functionality TBD
        measures = processArray()
        variability = vari
        type = typ
        trackVolFactor=1
        newRatio=1

        if (type == "melody" or type == "harmony"): 
            instrument = 0x60 #piano
        else:
            instrument = 0x35 #drum

  
    #methods to get variables
    def getTrack():
        return type

    def getInstrument():
        return instrument

    def getArray(change):
        if (change==1)
            if len(measures)!=0
                if cursor>=len(measures)
                    cursor=0
                    resetVal=resetVal-1
                ar=measures[cursor]
                cursor=cursor+1
                return ar
        else
            return measures[cursor]

    def getPureArray():
        return array

    def getStatus():
        return active

    def getReset():
        return resetVal



    #methods to set variables
    def setStatus(i):
        active=i

    def changeInstrument( newInst):
        instrument = newInst

    def changeDensity( newDen):
        density = newDen
    
    def changeOctave(curOct):
        curLen = len(array)
        for x=0 to curLen:
           curNote = array[x]
           curNote.octave = curOct

    #overall volume
    def changeVolFactor(newVol):
        trackVolFactor=newVol
        processVolume()

    #individual track volume
    def changeVol(newR):
        newRatio=newR
        processVolume()

    def setRealBPM(bp):
        if realBPM != bp
            realBPM =bp
            processArray()
    
    def setArray(ar):
        array=ar
        processArray()
        resetVal=irandom(5)



    #methods to calculate and process
    #makes array into measures
    def processArray():
        count = 0
        singleMeasure=[]
        measures=[]
        for i=0 to len(array)
            noteDur = array[i][0].getDuration()
            if (noteDur+count)>realBPM
                measures.append(singleMeasure)
                singleMeasure=[]
                count = noteDur
                singleMeasure.append(array[i])
            else
                singleMeasure.append(array[i])
                count= count + noteDur
        if singleMeasure!=[]
            extra = realBPM-count
            measures.append(singleMeasure)
        else
            extra = 0 

   
    def processVolume():
        curLen = len(array)
        for x=0 to (curLen):
            curNote = array[x][0]
            curNote.setVolume(newRatio*trackVolFactor)

    //changes the key for all notes in the track to k
    def changeKey(k):
        curLen = len(array)
        for x=0 to (curLen):
            for y = 0 to len(array[x]):
                curNote = array[x][y]
                curNote.setKey(k)

   

    

    
