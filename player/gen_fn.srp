require "dataStruct"
require "sched"
require "prefs"
require "midi-io"
require "mididevice"
require "wxserpent"
require "slider"
require "debug"


# gen_fn.srp - fns generating percussion and melody
#

    # compute a measure using these variables:
    #    cur_style - a symbol representing style to play (if
    #       this is not your style, do not play)
    #    cur_start_beat - what beat to start on if you are stopped
    #    cur_stop_beat - what beat to stop on if you have started (you can
    #       stop slightly late; generally you should not start any notes 
    #       at or after tm_stop_beat but you can play a short note on 
    #       tm_stop_beat if it is stylistically sensible.)
    #    cur_beats_per_measure - the current time signature as an integer
    #    cur_bps - current beats per second (the vtsched will implement this
    #       but reading the vtsched timemap slope is not reliable because
    #       vtsched may be updated instantaneously after this call.
    #    cur_scale - boolean array representing current scale
    #    cur_chord - boolean array representing current chord
    #    cur_bass - integer representing root of chord
    #
    # Use EPSILON here because comparing floats for equality is not
    #   reliable without very difficult analysis. So, instead of
    #   x >= y, we write x + EPSILON > y


#default patterns
pattern_jazz = [0.5, 1, 0.5, 0.2, 0.8]
pattern_tango = [1.5, 1.5, 1, 1.5, 1.5, 1]
pattern_waltz = [1, 1, 1]
pattern_rhumba = [0.5, 0.25, 0, 0.25, 0, 0.5]
pattern_tap = [0.5, 0.5, 0.5, 0.5]
default_patterns = [pattern_jazz, pattern_tango, pattern_waltz, 
                    pattern_rhumba, pattern_tap]

# need to write get prob
cur_scale = [t, nil, t, nil, t, t, nil, t, nil, t, nil, t]
cur_bass = 0
cur_style = ""

def play_percussion():
    newTrack = track([], 1, "perc")
    display newTrack.getInstrument()
    play_percussion_auto(0, "", newTrack)

def play_percussion_auto(index, prev_style, curTrack): 
    sched_select(vtsched)
    instr = curTrack.getInstrument()
    //display instr

    #if (user_input != ""):
        #choose a pattern using user input
    if (cur_style == 'jazz'):
        perc_pattern = pattern_jazz
    elif (cur_style == 'tango'):
        perc_pattern = pattern_tango
    elif (cur_style == 'waltz'):
        perc_pattern = pattern_waltz
    elif (cur_style == 'rhumba'):
        perc_pattern = pattern_rhumba
    elif (cur_style == 'tap'):
        perc_pattern = pattern_tap
    else:
        pattern = irandom(4)
        perc_pattern = default_patterns[pattern]
    #else:
    #    perc_pattern = user_input

    index = index + 1
    #reset duration to be played only if style changed or out_of_range
    if (prev_style != cur_style):
        prev_style = cur_style
        index = 0
    if (index > len(perc_pattern)-1):
        index = index % len(perc_pattern)

    #for i from 0 to 5:
     #for j from 0 to len(perc_pattern):
      #cur_note = curTrack.arr[i][j] 
      #cur_note = 60
      #cur_note.sduration = perc_pattern[j]
    #return curTrack

    #play percussion
    midi_out.note_on(instr, 60, 80)

    #schedule using current duration
    sched_cause(perc_pattern[index], nil, 'play_percussion_auto', index, prev_style, curTrack)
        
def gen_melody_array(cur_scale):
    prob = []
    note_prob = []

    #gnerate array of probabilities of moving from one note to another
    for note=0 to 12:
        if cur_scale[note] == t:
            note_prob = gen_note_prob(note, cur_scale)
            prob.append(note_prob)
        else:
            prob.append(0)

    return prob

def gen_note_prob(note, cur_scale):
    num_notes = len(cur_scale)
    prob_arr = []
    
    #generate probability by considering distance between two notes
    for i=0 to num_notes:
        if (cur_scale[i] == 't'):
            if (i == note):
                prob_arr.append(irandom(5))
            else:
                distance = abs(note - i)-1
                prob_arr.append(irandom(distance))
        else:
            prob_arr.append(0)
    return prob_arr

def get_next_note(prob, prev_note):
#return note with max prob for now
    next_note = 0
    display prob
    max = prob[0]

    //display "in next"
    for i=1 to len(prob)
        if prob[i] >= max:
            max = prob[i]
            next_note = i
   
    if prev_note > 1: 
        if prob[prev_note] <= 0:
            new_prob = irandom(abs(next_note-prev_note))
            if new_prob == 0:
                new_prob = abs(next_note-prev_note)
            prob[prev_note] = new_prob
        else:
            prob[prev_note] = prob[prev_note] + 1
    
    prob[next_note] = prob[next_note] - 2
     
     #if next_note == prev_note:
     #   curMax = prob.index(max)
         #prob[curMax] = 0     
         #next_note = get_next_note(prob, prev_note)

    return next_note

def play_melody_auto(index, note, prev_note, prob, curTrack):
    sched_select(vtsched)

    //display "playing"
    #instr = 96
    instr = curTrack.getInstrument()
   
    #for i from 0 to 5:
        #for j from 0 to 8:
            #curTrack[i][j] = note
    #return curTrack

    if (prev_note != -1):
        midi_out.note_on(instr, prev_note, 0)

    index = index % len(cur_scale)

    //display note
    note_prob = prob[note]
    next = get_next_note(note_prob, prev_note)
    //display "done next"

    display instr
    midi_out.note_on(instr, 60 + note, 100)
    index = index + 1
    display next

    //display "done playing"
    dur = irandom(10)
    #dur = 1
    #if dur > 2:
    dur = dur/7
    display dur

    sched_cause(dur, nil, 'play_melody_auto', index, next, note, prob, curTrack) 

def play_melody_user(index, curTrack):

    arr = curTrack.array
    instr = curTrack.getInstrument()
    cur_index = index

    if (index > len(arr)):
        cur_index = index % len(arr)

    cur_arr = arr[cur_index][0]
    note = cur_arr.pitch 
    duration = cur_arr.sduration
    volume = cur_arr.volume

    if (index > 0):
        if (cur_index == 0):
            prev_arr = arr[len(arr)-1][0]
            lenPrev = len(prev_arr)
            
            # turn off all notes in prev array
            for i=0 to (lenPrev):
                curNote = prev_arr[i]
                prevPitch = curNote.pitch
                midi_out.note_on(instr, prevPitch,0)

        else:
            prev_arr = arr[cur_index-1]
            lenPrev = len(prev_arr)
            for i=0 to (lenPrev):
                curNote = prev_arr[i]
                prevPitch = curNote.pitch
                midi_out.note_on(instr, prevPitch,0)

    midi_out.note_on(instr, note, volume)
    index = index + 1
    
    sched_cause(duration, nil, 'play_melody_user', index, track.array)

def play_melody():
    #if track.array != []:
     #   newTrack = track([], 1, "melody")
      #  play_melody_user(0, newTrack)
    #else:
    newTrack = track([], 1, "melody")
    prob = gen_melody_array(cur_scale)
    display prob
    play_melody_auto(0, cur_bass, -1, prob, newTrack)

def main():
    #random.seed(time_get())
    sched_init(2)
    prefs = Prefs("./prefs.txt")
    midiDevices = Midi_devices(prefs, open_later = true)
    success = midiDevices.open_midi(latency = 10, device = 'midi_out_device')
    if not success
        print "PLEASE SELECT A VALID OUTPUT DEVICE AND RESTART THIS PROGRAM"
    else
        sched_select(vtsched)
        sched_set_period(0.5)
        #sched_cause(real_delay(1), nil, 'play_melody')
        sched_cause(real_delay(1), nil, 'play_percussion')

#main()

