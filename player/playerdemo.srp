# playerdemo.srp - example of a bare-bones player
#
# Roger B. Dannenberg
# March 2017

# IMPORTANT: SERVICE must be defined before you load playerbase.srp:
SERVICE = "demo"

# Now load playerbase.srp
require "playerbase"
require "osc_interaction"


// some simple music generation: Here are some problems with this:
// - not very interesting
// - no manual control of anything
// - does everything: bass, chord, melody, instead of one thing
// - all piano sounds
// - cannot handle cur_beats_per_measure properly (assumes 4)
// - plays absurdly fast at faster tempos

//Really bad functions that supposedly find your key
//ONLY IMPLEMENTS MAJ, MIN, AND CHROMATIC

po_chords = [[[t, nil, t, nil, t, t, nil, t, nil, t, nil, t ], 
              [t, t, nil, t, nil, t, t, nil, t, nil, t, nil ], 
              [nil, t, t, nil, t, nil, t, t, nil, t, nil, t ], 
              [t, nil, t, t, nil, t, nil, t, t, nil, t, nil ], 
              [nil, t, nil, t, t, nil, t, nil, t, t, nil, t ], 
              [t, nil, t, nil, t, t, nil, t, nil, t, t, nil ], 
              [nil, t, nil, t, nil, t, t, nil, t, nil, t, t ],  
              [t, nil, t, nil, t, nil, t, t, nil, t, nil, t ], 
              [t, t, nil, t, nil, t, nil, t, t, nil, t, nil ], 
              [nil, t, t, nil, t, nil, t, nil, t, t, nil, t ], 
              [t, nil, t, t, nil, t, nil, t, nil, t, t, nil ], 
              [nil, t, nil, t, t, nil, t, nil, t, nil, t, t ]],
             [[t, nil, t, t, nil, t, nil, t, t, nil, t, nil ]
              [nil, t, nil, t, t, nil, t, nil, t, t, nil, t ], 
              [t, nil, t, nil, t, t, nil, t, nil, t, t, nil ], 
              [nil, t, nil, t, nil, t, t, nil, t, nil, t, t ], 
              [t, nil, t, nil, t, nil, t, t, nil, t, nil, t ], 
              [t, t, nil, t, nil, t, nil, t, t, nil, t, nil ], 
              [nil, t, t, nil, t, nil, t, nil, t, t, nil, t ], 
              [t, nil, t, t, nil, t, nil, t, nil, t, t, nil ], 
              [nil, t, nil, t, t, nil, t, nil, t, nil, t, t ], 
              [t, nil, t, nil, t, t, nil, t, nil, t, nil, t ], 
              [t, t, nil, t, nil, t, t, nil, t, nil, t, nil ], 
              [nil, t, t, nil, t, nil, t, t, nil, t, nil, t ]],
             [[t, t, t, t, t, t, t, t, t, t, t, t ]]]

#default patterns
pattern_jazz = [0.5, 1, 0.5, 0.2, 0.8]
pattern_tango = [1.5, 1.5, 1, 1.5, 1.5, 1]
pattern_waltz = [1, 1, 1]
pattern_rhumba = [0.5, 0.25, 0, 0.25, 0, 0.5]
pattern_tap = [0.5, 0.5, 0.5, 0.5]
default_patterns = [pattern_jazz, pattern_tango, pattern_waltz, 
                    pattern_rhumba, pattern_tap]


def returnKey(curScale):
    for k = 0 to len(po_chords):
        if po_chords[k].index(curScale) > -1:
            #display po_chords[k].index(curScale)
            return po_chords[k].index(curScale)
    #display "none"
    return 0;

def play_a_measure():
    # compute a measure using these variables:
    #    cur_style - a symbol representing style to play (if
    #       this is not your style, do not play)
    #    cur_start_beat - what beat to start on if you are stopped
    #    cur_stop_beat - what beat to stop on if you have started (you can
    #       stop slightly late; generally you should not start any notes 
    #       at or after tm_stop_beat but you can play a short note on 
    #       tm_stop_beat if it is stylistically sensible.)
    #    cur_beats_per_measure - the current time signature as an integer
    #    cur_bps - current beats per second (the vtsched will implement this
    #       but reading the vtsched timemap slope is not reliable because
    #       vtsched may be updated instantaneously after this call.
    #    cur_scale - boolean array representing current scale
    #    cur_chord - boolean array representing current chord
    #    cur_bass - integer representing root of chord
    #
    #display "play_a_measure", cur_beats_per_measure, cur_bps
    #display "    ", cur_scale, cur_chord, cur_bass
    #display "HI play_measure_again"
    if cur_style == 'rock'
        setTempo(cur_bps)
        k=returnKey(cur_scale)
        processAllTracks(k,cur_beats_per_measure,velocity_offset)
        playAllTracks()
    else
        midi_out.alloff()





     

