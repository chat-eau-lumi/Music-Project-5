# some data structure sketches by Amy Huo

# GLOBAL VARIABLES

MIN_PITCH;
MAX_PITCH;

# NOTES
# There are three representation of note pitches to consider: 
# * "keys" for piano OSC input ((single-character string, int octave))
# * "pitches" for MIDI pitch values (int)
# * "notes" octave/interval/key/staccato for music generation (note)

//key is an offset, with c = 0, which may cause some problems but hopefully shouldn't
class note:
    
    //note is created using pitch and key. staccato is default off
    def __init__(self, int pitch, int k):
        self.octave = (pitch - k) / 12;
        self.interval = (pitch - k) % 12;
        self.key = k
        self.staccato = false
    
    def note_to_pitch(self):
        return (12 * octave) + interval + key
    
    def staccato_on(self):
        self.staccato = true
        
    def staccato_off(self):
        self.staccato = false
        
def keys_to_note():
    //not yet implemented

# DURATION
# Two values: a starting time (0 is the beginning of the measure). The note is either
# held until the next note in the track or played staccato (very quickly turned off).

//some example durations
d_table_4_3 = [[0, 1.5, 3] [0, 1.5, 3.5]]
d_table_4_4 = [[0, 1, 2, 3], [0, 2, 2.5, 3], [1, 1.5, 2, 3]]
d_table_4_6 = [[0, 1, 1.5, 2, 3, 3.5]]

# TRACK
# An array of (note, duration, volume) where durations add to either a half-measure or
# a multiple of whole measures. Also includes variables for variability, pitch range,
# and more stuff TBD.

//no idea if any of this is working code lol
class track:

    //kinda dumb defaults, plz change
    def __int__(self):
        self.array = [] //actually inputting array functionality TBD
        self.variablity = 0;
        self.pitch_range = (0, 127)
        self.volume = 50
        
    
