# Required files to work on
require "debug"
require "midi-io"
require "prefs"

# Global variables
MIN_PITCH = 0;
MAX_PITCH = 12;

# NOTES
# There are three representation of note pitches to consider: 
# * "keys" for piano OSC input ((single-character string, int octave))
# * "pitches" for MIDI pitch values (int)
# * "notes" octave/interval/key/staccato for music generation (note)

// key is an offset, with c = 0, which may cause some problems but 
// hopefully shouldn't
class note:
<<<<<<< HEAD
    var pitch
    var key
    var staccato
    var volume
    var durat
=======

    var octave
    var interval
    var key
    var staccato
    var volume
    var sduration
    var pitchC
>>>>>>> 48f2adb79611f88cdc822715faae66e8214a33d8
    
    //note is created using pitch and key. staccato is default off
    def init(pit, k, vol, dur):
        pitch = pit
        key = k
        staccato = false
        volume = vol
<<<<<<< HEAD
        durat = dur
=======
        sduration = dur
        pitchC = pitch
>>>>>>> 48f2adb79611f88cdc822715faae66e8214a33d8
    
    def note_to_pitch():
        return pitch
    
    def staccato_on():
        staccato = true
        
    def staccato_off():
        staccato = false

    def getDuration()
        return durat

    def getVolume()
        return volume
    
    

def keys_to_note(oscString):

    //not yet implemented
    return 0;

# TRACK
# An array of (note, duration, volume) where durations add to either a 
# half-measure or
# a multiple of whole measures. Also includes variables for variability, 
# pitch range, and more stuff TBD.

class track:

    var array
    var variability
    var type
    var instrument 

    // takes in an array of notes, if have no motif, can key in empty
    // array which means we need to generate new motif
    def init(notes, vari, typ):
        array = notes //actually inputting array functionality TBD
        variability = vari
        type = typ

        if (type == "melody" or type == "harmony"): 
            instrument = 0x60 #piano
        else:
            instrument = 0x35 #drum

    def changeVol( newRatio):
        curLen = len(array)
        for x in range(curLen):
            curNote = array[x]
            curNote.volume = curNote.volume * newRatio

    def changeInstrument( newInst):
        instrument = newInst

    def changeDensity( newDen):
        density = newDen
    
    def changeOctave(curOct):
        curLen = len(array)
        for x in range(curLen):
           curNote = array[x]
           curNote.octave = curOct

    def getTrack():
        return type
    def getInstrument():
        return instrument

    def getArray():
        return array



    
